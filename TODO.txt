# TODO

- Eliminar belongs_to de los requests para evitar se puedan cambiarle el owner a un registro:

PUT http://simplerest.lan/api/products/133

{
    "name": "Vodka venezolano",
    "description": "de Vzla",
    "size": "1L",
    "cost": "15",
    "belongs_to": "90"   <------------- problema
}

Actualmente la seguridad impide que puedan modificarse registros que no nos pertenecen pero nada impide que se los asignemos ("donemos") a terceros.

- Soportar filtrado por valores NULL
- Capturar excepciones como:

Uncaught InvalidArgumentException: id is no fillable in /home/www/simplerest/app/core/Model.php: 257

- Al generar los modelos..... modificar la tabla correspondiente agregando el campo belongs_to 

ALTER TABLE `products` ADD `belongs_to` INT NOT NULL AFTER `cost`, ADD INDEX (`belongs_to`);

- Ofrecer la forma de filtrado compatible con JSON:API

GET /employees?filter[state]=internal&filter[title]=senior
GET /employees?filter[id]=1,2

equivalente a...

GET /employees?state=internal&title=senior
GET /employees?id=1,2

- En vez de devolver solo un mensaje de error y un status, ofrecer tambien un código de error

// 400 Bad Request
{
  "errors": [
    {
      "status": 400,
      "detail": "Invalid state. Valid values are 'internal' or 'external'",
      "code": 352,
      "links": {
        "about": "http://www.domain.com/rest/errorcode/352"
      }
    }
  ]
}

Más 
https://jsonapi.org/format/#error-objects
https://phauer.com/2015/restful-api-design-best-practices/


- Soportar formatos JSON, XML,  YAML, CSV ...

HTTP/1.1 200 OK
Content-Type: application/xml
Content-Length: ...

<?xml version="1.0"?>
<account>
    <account_number>12345</account_number>
    <balance currency="usd">100.00</balance>
    <link rel="deposit" href="/accounts/12345/deposit" />
    <link rel="withdraw" href="/accounts/12345/withdraw" /> 
    <link rel="transfer" href="/accounts/12345/transfer" />
    <link rel="close" href="/accounts/12345/close" />
</account>

- SoftDelete
- Reemplazar sha1() por password_hash / password_verify 
- Versionado ej: http://simplerest.lan/api/v1/users
- "Prety print" con ?prety=true, ejemplo de la salida:
https://api.github.com/users/veesahni
- En config colocar $config['error_if_not_fillable']=false 
- Simplificar la forma de crear la conexion a la DB como en Laravel Lummen:
https://lumen.laravel.com/docs/6.x/database
- Implementar mi data-validator
- Generar Modelos con sus schemas a partir de la DB como con CRUDO usando un comando.
- Auto-joins basado en convenciones (Doctrine hace lo mismo)
- Probar en Windows
- Investigar a la competencia en frameworks MVC y API Rest
- oAuth ?
- Form de registro (front)
- Paginador (front)
- Controles más complejos como checkbox, radio, combobox
- Routers como en Laravel (!)
- Middlewares
- Migrations, seeders,...
- Sanitización a nivel de urls, FILTER_SANITIZE_URL
- Sanitización a nivel de base de datos
- Documentar !!!! <-- comenzar
- Upload de archivos con Content-type application/x-www-form-urlencoded ó multipart/form-data
https://stackoverflow.com/a/4083908/980631
Si se genera un error, detallar según:
https://www.php.net/manual/en/features.file-upload.errors.php

- Aceptar distintos "Accept" y "Content-type" y responder acordemente

- Operador LIKE como ?name[like]=*Vodka* o... ?name[like]=Vodka* o ?name[like]=*Vodka
- Consultas más complejas para API Rest incluyendo operadores lt, gt, ge, le, ne (!=) y or 
Sacar ideas de: https://dev.targetprocess.com/docs/custom-calculations

* "additional details embedded"
* Overriding the HTTP method
* Rate limiting
* Caching
* Errors

- Securitizar almacenamiento de tokens -- en cookies?

https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage
https://medium.com/@jcbaey/authentication-in-spa-reactjs-and-vuejs-the-right-way-e4a9ac5cd9a3
https://dev.to/rdegges/please-stop-using-local-storage-1i04

- error y error description, ej: 

HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer error="invalid_token"
  error_description="The access token expired"
Content-type: application/json
 
{
  "error": "invalid_token",
  "error_description": "The access token expired"
}

- Custom Actions (Nested Resources)


- Leer atentamente
https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api
https://phauer.com/2015/restful-api-design-best-practices/
https://www.paradigmadigital.com/dev/oauth-2-0-equilibrio-y-usabilidad-en-la-securizacion-de-apis/
https://medium.com/crowdbotics/how-to-write-an-api-in-3-lines-of-code-with-django-rest-framework-59b0971edfa4
https://idratherbewriting.com/learnapidoc/pubapis_openapi_tutorial_overview.html
https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md
https://hackernoon.com/designing-rest-api-with-open-api-specification-oas-v2-0-v3-0-using-swagger-11dd4ef8cea6