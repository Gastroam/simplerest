DOCUMENTACION 
-------------


### ACL

La implementación del ACL es parecido al de Linux, habiendo permisos a nivel de rol, para un "grupo" de usuarios y para "otros".

El framework maneja varias tablas para implementar el ACL, entre ellas `group_permissions` se encarga de mantener los permisos de lectura y escritura concedidos por el usuario (owner del recurso) a cierto grupo de usuarios. El campo "register" hace referencia al id de registro en la tabla del endpoint correspondiente (productos, ticketes, etc) y en caso de ser NULL se toma como comodín afectando a todos los registros de esa tabla para ese owner.


# Folders

Sobre cada recurso se pueden crear espacios virtuales separados llamados "folders" a los cuales se les pueden establecer permisos para que otros usuarios los visualicen. Estos folders no tienen nada que ver con el sistema de archivos.

Para acceder a un folder se especifica el id del folder y otros usuarios pueden entonces listar o visualizar recursos que se le hayan compartido.

	GET /api/products?folder=1

Por supuesto pueden aplicarse otros filtros:

	GET /api/products?folder=1&cost=200

Y puede visualizarse un registro en particular (ej: 124) para el que no tendríamos permiso si especificamos el folder:

	GET /api/products/124?folder=1		

Un usuario con rol de administrador en principio obtendrá todos los registros para un endpoint incluidos los que pertenecen a folders privados de otros usuarios:

	GET /api/products

<-- obtiene todos los registros indiscriminadamente

Sin embargo también puede restringir a un folder en particular:

	GET /api/products?folder=57

Los permisos para los folders se conceden creando entradas en la tabla group_permissions y es importante notar que debe darse explícitamente permiso al owner (así como a los otros usuarios) para que éste ver registros dentro de ese folder.

Obviamente cada usuario puede listar, editar o borrar sus folders usando el endpoint /api/folders

Igualmente cada usuario puede hacer CRUD sobre los permisos de "grupo" y para "otros" a través de sus respectivos endpoints /api/GroupPermissions y /api/OtherPermissions respectivamente de modo de permitir a otros miembros acceso de lectura y/o escritura de sus registros.

Para crear un registro en un folder del que se ha concedido permiso de escritura se incluye como campo el id del "folder". Ej:

	POST /api/products

	{
	    "name": "Vodka venezolanooooooooo",
	    "description": "de Vzla",
	    "size": "1L",
	    "cost": "15",
	    "folder": "1"
	}

En caso de no tener acceso al folder recibiremos un mensaje de error como:

	{
	    "error": "You have not permission for the folder 2"
	}

Igualmente para modificar un registro de otro usuario que nos ha compartido su folder especificamos el id del folder:

	PUT /api/products/136

	{
	    "name": "Vodka venezolanoxxxx",
	    "description": "de Vzla",
	    "size": "1L",
	    "cost": "15",
	    "folder": "1"
	}

Mismo para borrar un registro perteneciente a un folder:

	DELETE /api/products/136

	{
    	"folder": "1"
	}

	